ðŸ”¹ git branch -d <branch>
	â€¢	-d = delete safely.
	â€¢	Git checks if the branch youâ€™re deleting has been fully merged into its upstream (e.g., main or the branch youâ€™re on).
	â€¢	If it has been merged â†’ branch pointer is deleted.
	â€¢	If it hasnâ€™t been merged â†’ Git refuses, to avoid losing commits.

Example:
A --- B --- C --- D   (main, HEAD)
       \
        E --- F   (featureX)
git branch -d featureX
error: The branch 'featureX' is not fully merged.
If you are sure you want to delete it, run 'git branch -D featureX'.

git branch -D <branch>
	â€¢	-D = force delete.
	â€¢	Git deletes the branch pointer even if it has unmerged commits.
	â€¢	The commits (E, F) still exist in the repo, but they become dangling (reachable only from git reflog until garbage-collected).

Example:
A --- B --- C --- D   (main, HEAD)
       \
        E --- F   (dangling now after -D)
Summary
	â€¢	-d â†’ safe delete (only if merged).
	â€¢	-D â†’ force delete (branch removed regardless of merge status).
	â€¢	Commits arenâ€™t deleted immediately, but theyâ€™ll be garbage-collected later if no refs/tags point to them.

Best practice in teams:
	â€¢	Use -d by default.
	â€¢	Use -D only if youâ€™re sure the branch isnâ€™t needed anymore.
